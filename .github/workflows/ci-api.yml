# --- Define When execute this Workflow ---
name: FastAPI CI/CD Workflow

on: 
  push:
    branches: 
      - main # Trigger on push to main branch
      - dev_api # Trigger on push to dev_api branch
  pull_request: 
    branches: 
      - main 
      - dev_api # Execute the workflow on pull request to main ro dev_api

jobs:
  build-and-test: 
    runs-on: ubuntu-latest # Define the OS to run the job

    steps: 
      - name: checkout Repository # First Step: Clone the repository
        uses: actions/checkout@v4

      - name: set up python # Second step: Set up Python environment
        uses: actions/setup-python@v5
        with: 
          python-version: '3.12.7' # Specify the Version of python to use
          cache: 'pip' # Cache pip dependencies

      - name: Create requirements.txt (if not exist) # Create requirements.txt
        run: |
          if [ ! -f requirements.txt ]; then
            echo "Creating requirements.txt file"
            echo "fastapi" > requirements.txt
            echo "uvicorn" >> requirements.txt
            echo "pydantic" >> requirements.txt
            echo "httpx" >> requirements.txt
          else
            echo "requirements.txt already exists"
          fi

      - name: Install dependencies # Step 3: Install dependencies To the project
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Linter (ruff) # Step 4: Execute Linter To verify the code style
        run: |
          pip install ruff
          ruff check . --fix # Check and fix code style issues 
      
      - name: Simulate Uvicorn Server # Step 5: Simulate running the FastAPI Server and test point
        run: |
          # IMPORTANT NOTE: In a CI pipeline, you typically don't keep a server running
          # indefinitely. This step starts it, verifies that it's responsive, and stops it.
          # For more robust testing, you would use testing frameworks like Pytest.
          # Start Uvicorn in the background
          # The 'backend.api_backend.app' path implies that:
          # - there is a 'backend' folder in the root of the repo.
          # - inside 'backend' is an 'api_backend' folder.
          # - inside 'api_backend' is an 'app.py' file.
          # - and inside 'app.py' your FastAPI instance is named 'app'.
                    uvicorn backend.api_backend.app:app --host
          uvicorn backend.api_backend.app:app --host --post 8000 & UVICORN_PID=$! # Save the PID of the Uvicorn Process

          echo "Waiting for Uvicorn to start..."
          sleep 5 # Wait for the server to start

      - name: Test FastAPI (Placeholder) # Step 6: Test FastAPI endpoints
        run: |
          echo "Testing FastAPI endpoints..."
          # For Example: pip install pytest-httpx
          # If your not testing framework, this step would by to test the fastAPI endpoints.

      - name: Conclusion # Step 7: Conclusion Workflow
        run: |
          echo "FastAPI CI/CD Workflow completed successfully!"
          echo "You can now deploy your FastAPI application or continue with further steps."